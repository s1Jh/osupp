/*******************************************************************************
 * Copyright (c) 2022 sijh (s1Jh.199[at]gmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

#pragma once

#include "define.hpp"

#include "Camera.hpp"
#include "Size.hpp"
#include "df2.hpp"
#include "Drawable.hpp"
#include "Settings.hpp"

typedef struct GLFWwindow GLFWwindow;

NS_BEGIN

class Renderer
{
public:
    Camera2D camera;

    Renderer();

    ~Renderer();

    bool create();

    void destroy();

    bool setMode(int width, int height, bool fullscreen, int refreshRate = 60);

    bool runTasks();

    void begin(const color &clearColor = BLACK);

    void end();

    [[nodiscard]] isize getSize() const;

    GLFWwindow *getWindowHandle();

    template<typename T, typename ... ArgT>
    requires IsDrawable<T>
    inline void draw(const T &obj, ArgT... vaArgs)
    {
        detail::RenderFunctor<T> functor;
        functor(*this, obj, vaArgs...);
    }

    void clear(const color &color);

private:

    const static std::vector<std::string> StandardResolutions;
    Setting<std::string> resolution;
    Setting<bool> fullscreen;
    Setting<int> refreshRate;

    static void onError(int code, const char *msg);

    static void onResize(GLFWwindow *window, int width, int height);

    GLFWwindow *windowHandle;
};

NS_END